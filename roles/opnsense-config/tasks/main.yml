---
- name: Wait for OPNsense VM to be defined
  wait_for:
    timeout: 30
  delegate_to: localhost

- name: Fix /media/pi directory permissions for libvirt access
  file:
    path: /media/pi
    mode: "0755"
    state: directory
  become: true

- name: Ensure all parent directories are accessible
  file:
    path: "{{ item }}"
    mode: "0755"
    state: directory
  become: true
  loop:
    - "/media"
    - "/media/pi"
    - "/media/pi/ext_drive_1TB"
    - "/media/pi/ext_drive_1TB/vm-storage"

- name: Ensure VM storage directory exists with proper permissions
  file:
    path: "{{ vm_storage_path }}"
    state: directory
    owner: "libvirt-qemu"
    group: "kvm"
    mode: "0755"
    recurse: yes
  become: true

- name: Ensure libvirt-qemu has access to the VM disk image
  file:
    path: "{{ vm_storage_path }}/{{ opnsense_vm_name }}.qcow2"
    owner: "libvirt-qemu"
    group: "kvm"
    mode: "0660"
  become: true

- name: Test libvirt-qemu access to VM disk
  shell: sudo -u libvirt-qemu test -r "{{ vm_storage_path }}/{{ opnsense_vm_name }}.qcow2"
  register: access_test
  become: true
  failed_when: access_test.rc != 0

- name: Verify bridge interface exists
  command: ip link show {{ bridge_interface }}
  register: bridge_check
  ignore_errors: yes

- name: Create bridge if not exists
  command: ip link add name {{ bridge_interface }} type bridge
  when: bridge_check.rc != 0

- name: Ensure bridge is up
  command: ip link set {{ bridge_interface }} up
  when: bridge_check.rc != 0

- name: Add interface to bridge
  command: ip link set {{ lan_interface }} master {{ bridge_interface }}
  when: bridge_check.rc != 0

- name: Start OPNsense VM
  virt:
    name: "{{ opnsense_vm_name }}"
    state: running
  register: opnsense_vm_start

- name: Wait for OPNsense VM to boot
  wait_for:
    timeout: 300
  when: opnsense_vm_start.changed

- name: Create OPNsense configuration directory
  file:
    path: "{{ usb_storage_path }}/{{ opnsense_vm_name }}/opnsense-config"
    state: directory
    mode: "0755"

- name: Generate OPNsense initial config
  template:
    src: config.xml.j2
    dest: "{{ usb_storage_path }}/{{ opnsense_vm_name }}/opnsense-config/config.xml"
    mode: "0644"

- name: Generate firewall rules configuration
  template:
    src: firewall-rules.xml.j2
    dest: "{{ usb_storage_path }}/{{ opnsense_vm_name }}/opnsense-config/firewall-rules.xml"
    mode: "0644"

- name: Copy OPNsense bootstrap script
  copy:
    src: opnsense-bootstrap.sh
    dest: "{{ usb_storage_path }}/{{ opnsense_vm_name }}/opnsense-bootstrap.sh"
    mode: "0755"

- name: Create OPNsense API configuration script
  template:
    src: opnsense-api-config.py.j2
    dest: "{{ usb_storage_path }}/{{ opnsense_vm_name }}/opnsense-api-config.py"
    mode: "0755"

- name: Install Python requests for OPNsense API
  pip:
    name: requests
    state: present

- name: Wait for OPNsense web interface to be available
  uri:
    url: "https://{{ opnsense_lan_ip }}"
    method: GET
    validate_certs: no
    status_code: [200, 302, 401, 403]
  register: opnsense_web_check
  until: opnsense_web_check.status in [200, 302, 401, 403]
  retries: 30
  delay: 10
  ignore_errors: yes

- name: Display OPNsense access information
  debug:
    msg: |
      OPNsense VM has been started and should be accessible at:
      Web Interface: https://{{ opnsense_lan_ip }}
      Default Username: root
      Default Password: opnsense

      Please complete the initial setup wizard manually or run:
      /tmp/opnsense-bootstrap.sh

      VM Console Access: sudo virsh console {{ opnsense_vm_name }}

- name: Create OPNsense service management script
  template:
    src: manage-opnsense.sh.j2
    dest: /usr/local/bin/manage-opnsense.sh
    mode: "0755"

- name: Create systemd service for OPNsense VM auto-start
  template:
    src: opnsense-vm.service.j2
    dest: /etc/systemd/system/opnsense-vm.service
    mode: "0644"
  notify:
    - reload systemd
    - enable opnsense service
